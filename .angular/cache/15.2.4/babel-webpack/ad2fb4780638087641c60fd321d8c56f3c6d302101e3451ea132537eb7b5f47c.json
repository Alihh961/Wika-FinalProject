{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./logged-in-user.service\";\nimport * as i2 from \"@angular/router\";\nexport class GuardGuard {\n  constructor(loggedInUserServiceInstance, router) {\n    this.loggedInUserServiceInstance = loggedInUserServiceInstance;\n    this.router = router;\n  }\n  canActivate() {\n    return this.loggedInUserServiceInstance.getLoggedInStatus().pipe(map(isLoggedIn => {\n      if (isLoggedIn) {\n        this.router.navigate(['/home']);\n        return false;\n      } else {\n        return true;\n      }\n    }));\n  }\n}\nGuardGuard.ɵfac = function GuardGuard_Factory(t) {\n  return new (t || GuardGuard)(i0.ɵɵinject(i1.LoggedInUserService), i0.ɵɵinject(i2.Router));\n};\nGuardGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GuardGuard,\n  factory: GuardGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,2BAAgD,EAAUC,MAAc;IAAxE,gCAA2B,GAA3BD,2BAA2B;IAA+B,WAAM,GAANC,MAAM;EAAY;EAEhGC,WAAW;IACT,OAAO,IAAI,CAACF,2BAA2B,CAACG,iBAAiB,EAAE,CAACC,IAAI,CAC9DP,GAAG,CAACQ,UAAU,IAAG;MACf,IAAIA,UAAU,EAAE;QACd,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,KAAK;OACb,MAAM;QACL,OAAO,IAAI;;IAEf,CAAC,CAAC,CACH;EACH;;AAdWR,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAS,SAAVT,UAAU;EAAAU,YAFT;AAAM","names":["map","GuardGuard","constructor","loggedInUserServiceInstance","router","canActivate","getLoggedInStatus","pipe","isLoggedIn","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hajha\\OneDrive\\Desktop\\Wika\\src\\app\\services\\guard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { LoggedInUserService } from './logged-in-user.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardGuard implements CanActivate {\n  constructor(private loggedInUserServiceInstance: LoggedInUserService, private router: Router) { }\n\n  canActivate(): Observable<boolean> {\n    return this.loggedInUserServiceInstance.getLoggedInStatus().pipe(\n      map(isLoggedIn => {\n        if (isLoggedIn) {\n          this.router.navigate(['/home']);\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}