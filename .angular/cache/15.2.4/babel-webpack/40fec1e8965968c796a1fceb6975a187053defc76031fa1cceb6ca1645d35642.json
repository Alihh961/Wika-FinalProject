{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport Swal from 'sweetalert2';\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { baseURL } from 'src/environment/environment';\nimport { passwordDoesntMatch } from 'src/validators/passwordvalidator.validator';\nlet LoginComponent = class LoginComponent {\n  constructor(http, authService, ageValidationInstance, cookieService, loggedInUserInstance, router) {\n    this.http = http;\n    this.authService = authService;\n    this.ageValidationInstance = ageValidationInstance;\n    this.cookieService = cookieService;\n    this.loggedInUserInstance = loggedInUserInstance;\n    this.router = router;\n    this.patternRespected = false;\n    this.pattern = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\n    this.isLoggedIn = false;\n    this.displaySuggestions = false;\n    this.userinscriptiondetails = {\n      firstname: '',\n      lastname: '',\n      email: '',\n      password: '',\n      passwordconfirmation: '',\n      birthdate: null,\n      street: '',\n      buildingnumber: '',\n      gender: ''\n    };\n    // * Variables related to the component class file \n    this.features = [];\n  }\n  ngOnInit() {\n    this.initLogForm();\n    this.initRegistrationForm();\n    this.loggedInUserInstance.getLoggedInUserInfo().subscribe(value => {\n      this.loggedInUserInfo = value;\n    });\n    this.loggedInUserInstance.getLoggedInStatus().subscribe(value => {\n      this.isLoggedIn = value;\n    });\n  }\n  //* Searching for address when a change happens\n  searchingAddress(value) {\n    if (!value) {\n      //* Display none for the previous results if the input value becomes null\n      this.addressResults.nativeElement.style.display = \"none\";\n    }\n    const url = `https://api-adresse.data.gouv.fr/search/?q=${value}&limit=10`;\n    return this.http.get(url).subscribe(reponse => {\n      console.log(reponse);\n      this.features = reponse.features;\n      this.addressResults.nativeElement.style.display = \"block\";\n    });\n  }\n  //* Selecting the address on click event\n  selectaddress(divElement) {\n    // targeting the click Div\n    const address = divElement.target;\n    // asign the value of the div address to the input value \n    // this.input.nativeElement.value = address.innerHTML;\n    this.userinscriptiondetails.street = address.innerHTML;\n    // display none of the container after selecting the address\n    this.addressResults.nativeElement.style.display = \"none\";\n    // disable the input after adding the value \n    this.input.nativeElement.setAttribute('disabled', \"\");\n    // display none for the container of the suggessted address\n    this.suggestions.nativeElement.innerHTML = \"\";\n  }\n  //* Reset the input to set a new address\n  resetInput() {\n    // undisabled the address input to set a new address\n    this.input.nativeElement.removeAttribute(\"disabled\", \"\");\n    // empty the value of the inputs\n    this.userinscriptiondetails.street = \"\";\n    this.userinscriptiondetails.buildingnumber = \"\";\n    // \n    this.submitbutton.nativeElement.setAttribute('disabled', 'true');\n  }\n  //* Changing the color of span signin and signup on click in the arrow\n  changingColorOfSpan() {\n    if (getComputedStyle(this.signinspan.nativeElement).color == \"rgb(8, 129, 120)\") {\n      this.signinspan.nativeElement.style.color = \"rgb(196, 195, 202)\";\n      this.signupspan.nativeElement.style.color = \"rgb(8, 129, 120)\";\n    } else {\n      this.signinspan.nativeElement.style.color = \"rgb(8, 129, 120)\";\n      this.signupspan.nativeElement.style.color = \"rgb(196, 195, 202)\";\n    }\n  }\n  //* Submitting the form\n  onRegFormSubmit() {\n    this.http.post(`${baseURL}/inscription.php`, this.userinscriptiondetails).subscribe(response => {\n      // Handle success response\n      console.log(response[0]);\n      if (response[0] === \"An account associated to this email!\") {\n        Swal.fire('Ops', response[0], 'error');\n      } else if (response[0] === \"Account has been successfully registered\") {\n        Swal.fire('Good job!', response[0], 'success');\n      } else {\n        Swal.fire({\n          title: 'Error!',\n          text: response[0],\n          icon: 'error',\n          confirmButtonText: 'Try Again'\n        });\n      }\n    }, error => {\n      // Handle error response\n      Swal.fire({\n        title: 'Error!',\n        text: error,\n        icon: 'error',\n        confirmButtonText: 'Cool'\n      });\n    });\n  }\n  //* valid date of people over than 18 years old\n  // ageValidator(control: FormControl): ValidationErrors | null {\n  //   if (this.ageIsValid.ageIsValid(control)) {\n  //     return null; // Valid age\n  //   } else {\n  //     return { ageInvalid: true }; // Age is less than 18\n  //   }\n  // }\n  //* Checking the value of address on blur\n  onBlur(element) {\n    const input = element.target;\n    if (!input.hasAttribute(\"disabled\") && this.regForm.invalid) this.submitbutton.nativeElement.setAttribute(\"disabled\", \"\");\n  }\n  //* Switching between The Form Faces\n  changingFace(click) {\n    const button = click.target;\n    if (button.classList.contains(\"toSecondFace\")) {\n      if (button.classList.contains(\"previousArrow\")) {\n        //*From Third Face to Second Face\n        this.thirdFace.nativeElement.style.right = \"-90%\";\n        this.secondFace.nativeElement.style.right = \"13%\";\n      } else {\n        //* From First Face to Second Face\n        this.firstFace.nativeElement.style.right = \"110%\";\n        this.secondFace.nativeElement.style.right = \"13%\";\n      }\n    } else if (button.classList.contains(\"toFirstFace\")) {\n      //* From Second Face to First Face\n      this.secondFace.nativeElement.style.right = \"-90%\";\n      this.firstFace.nativeElement.style.right = \"13%\";\n    } else {\n      //* From Second Face to Third Face\n      this.secondFace.nativeElement.style.right = \"110%\";\n      this.thirdFace.nativeElement.style.right = \"13%\";\n    }\n  }\n  //* Check the password match using ngModelChange \n  checkPasswordMatch() {\n    if (this.userinscriptiondetails.password == this.userinscriptiondetails.passwordconfirmation) {\n      console.log(\"Passwords are equal\");\n      this.passwordMatch = true;\n    } else {\n      console.log(\"Passwords are not equal\");\n      this.passwordMatch = false;\n    }\n  }\n  //* Check the match of passwords\n  // passwordIsValid(event: Event): void {\n  //   const input = event.target as HTMLInputElement;\n  //   if (this.passwordMatch && this.pattern.test(input.value)) {\n  //     this.patternRespected == true;\n  //   } else {\n  //     this.patternRespected = false;\n  //   }\n  // }\n  //* Init login form\n  initLogForm() {\n    this.loginFormInfo = new FormGroup({\n      logemail: new FormControl(\"\", [Validators.required, Validators.pattern(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")]),\n      logpassword: new FormControl(\"\", [Validators.required])\n    });\n  }\n  get logemail() {\n    return this.loginFormInfo.get(\"logemail\");\n  }\n  get logPassword() {\n    return this.loginFormInfo.get(\"logPassword\");\n  }\n  //* Init Registeration form\n  initRegistrationForm() {\n    this.registrationFormGroup = new FormGroup({\n      firstFaceGroup: new FormGroup({\n        firstName: new FormControl(null, [Validators.required, Validators.pattern(\"^[a-zA-Z]+$\")]),\n        lastName: new FormControl(null, [Validators.required, Validators.pattern(\"^[a-zA-Z]+( [a-zA-Z]+( [a-zA-Z]+)?)?$\")]),\n        birthdate: new FormControl(null, [Validators.required, this.ageValidationInstance.ageIsValid?.bind(this.ageValidationInstance)])\n      }),\n      secondFaceGroup: new FormGroup({\n        email: new FormControl(null, [Validators.required, Validators.pattern(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")]),\n        passwordGroup: new FormGroup({\n          password: new FormControl(null, [Validators.required, Validators.pattern(\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$\")]),\n          confPassword: new FormControl(null, [Validators.required, Validators.pattern(\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$\")])\n        }, {\n          validators: passwordDoesntMatch\n        })\n      }),\n      thirdFaceGroup: new FormGroup({\n        street: new FormControl(null, Validators.required),\n        buildingNumber: new FormControl(null, Validators.required),\n        gender: new FormControl(null, Validators.required)\n      })\n    });\n  }\n  get secondFaceGroup() {\n    return this.registrationFormGroup.get('secondFaceGroup');\n  }\n  get firstName() {\n    return this.registrationFormGroup.get('firstFaceGroup.firstName');\n  }\n  get lastName() {\n    return this.registrationFormGroup.get('firstFaceGroup.lastName');\n  }\n  get birthdate() {\n    return this.registrationFormGroup.get('firstFaceGroup.birthdate');\n  }\n  get password() {\n    return this.registrationFormGroup.get('secondFaceGroup.password');\n  }\n  get confPassword() {\n    return this.registrationFormGroup.get('secondFaceGroup.confPassword');\n  }\n  get email() {\n    return this.registrationFormGroup.get('secondFaceGroup.email');\n  }\n  get street() {\n    return this.registrationFormGroup.get('thirdFaceGroup.street');\n  }\n  get buildingNumber() {\n    return this.registrationFormGroup.get('thirdFaceGroup.buildingNumber');\n  }\n  get gender() {\n    return this.registrationFormGroup.get('thirdFaceGroup.gender');\n  }\n  //* Logging in method\n  loginMethod() {\n    if (this.loginFormInfo.valid) {\n      this.authService.login({\n        \"logemail\": `${this.loginFormInfo.value.logemail}`,\n        \"logpassword\": `${this.loginFormInfo.value.logpassword}`\n      }).subscribe(reponse => {\n        if (reponse == \"Please Check your email and password.\") {\n          Swal.fire({\n            icon: 'error',\n            title: 'Failed to connect',\n            text: 'Invalid email or password!'\n          });\n        } else {\n          this.loggedInUserInstance.setLoggedInUserInfo(reponse);\n          this.loggedInUserInstance.setLoggedInStatus(true);\n          const token = reponse.email;\n          this.cookieService.set('token', token);\n          Swal.fire({\n            icon: 'success',\n            title: 'Welcome',\n            text: `${this.loggedInUserInfo.firstname}`\n          });\n          this.router.navigate(['/home']);\n        }\n      }, error => {\n        console.log(error);\n      });\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Error...',\n        text: 'Something went wrong, refresh the page and try again!'\n      });\n    }\n  }\n  //* Setting the isLoggedInStatus to true if token exists\n  setter() {\n    if (this.cookieService.check(\"token\")) {\n      this.loggedInUserInstance.setLoggedInStatus(true);\n    }\n  }\n};\n__decorate([ViewChild('header')], LoginComponent.prototype, \"header\", void 0);\n__decorate([ViewChild(\"signinspan\")], LoginComponent.prototype, \"signinspan\", void 0);\n__decorate([ViewChild(\"signupspan\")], LoginComponent.prototype, \"signupspan\", void 0);\n__decorate([ViewChild(\"suggestions\")], LoginComponent.prototype, \"suggestions\", void 0);\n__decorate([ViewChild(\"addressResults\")], LoginComponent.prototype, \"addressResults\", void 0);\n__decorate([ViewChild(\"input\")], LoginComponent.prototype, \"input\", void 0);\n__decorate([ViewChild(\"submitButton\")], LoginComponent.prototype, \"submitbutton\", void 0);\n__decorate([ViewChild(\"firstFace\")], LoginComponent.prototype, \"firstFace\", void 0);\n__decorate([ViewChild(\"secondFace\")], LoginComponent.prototype, \"secondFace\", void 0);\n__decorate([ViewChild(\"thirdFace\")], LoginComponent.prototype, \"thirdFace\", void 0);\n__decorate([ViewChild(\"registrationForm\")], LoginComponent.prototype, \"regForm\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":"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","names":["Swal","Component","ViewChild","FormControl","FormGroup","Validators","baseURL","passwordDoesntMatch","LoginComponent","constructor","http","authService","ageValidationInstance","cookieService","loggedInUserInstance","router","firstname","lastname","email","password","passwordconfirmation","birthdate","street","buildingnumber","gender","ngOnInit","initLogForm","initRegistrationForm","getLoggedInUserInfo","subscribe","value","loggedInUserInfo","getLoggedInStatus","isLoggedIn","searchingAddress","addressResults","nativeElement","style","display","url","get","reponse","console","log","features","selectaddress","divElement","address","target","userinscriptiondetails","innerHTML","input","setAttribute","suggestions","resetInput","removeAttribute","submitbutton","changingColorOfSpan","getComputedStyle","signinspan","color","signupspan","onRegFormSubmit","post","response","fire","title","text","icon","confirmButtonText","error","onBlur","element","hasAttribute","regForm","invalid","changingFace","click","button","classList","contains","thirdFace","right","secondFace","firstFace","checkPasswordMatch","passwordMatch","loginFormInfo","logemail","required","pattern","logpassword","logPassword","registrationFormGroup","firstFaceGroup","firstName","lastName","ageIsValid","bind","secondFaceGroup","passwordGroup","confPassword","validators","thirdFaceGroup","buildingNumber","loginMethod","valid","login","setLoggedInUserInfo","setLoggedInStatus","token","set","navigate","setter","check","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hajha\\OneDrive\\Desktop\\Wika\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport Swal from 'sweetalert2';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { Feature, FeatureCollection } from '../Interface/AddressResults';\r\nimport { UserInscription, loggedInUserInfo } from '../Interface/userdetails';\r\nimport { FormControl, FormGroup, ValidationErrors, Validators } from '@angular/forms';\r\nimport { AuthenticationService } from '../../services/authentication.service';\r\nimport { InputvalidationsService } from '../../validators/inputvalidations.service';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { LoggedInUserService } from '../../services/logged-in-user.service';\r\nimport { baseURL } from 'src/environment/environment';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { passwordDoesntMatch } from 'src/validators/passwordvalidator.validator';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent {\r\n\r\n  //* Variables related to the view template \r\n\r\n  passwordMatch !: boolean;\r\n  patternRespected: boolean = false;\r\n  pattern: any = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\r\n  isLoggedIn: boolean = false;\r\n  displaySuggestions: boolean = false;\r\n\r\n\r\n  userinscriptiondetails: UserInscription = {\r\n    firstname: '',\r\n    lastname: '',\r\n    email: '',\r\n    password: '',\r\n    passwordconfirmation: '',\r\n    birthdate: null,\r\n    street: '',\r\n    buildingnumber: '',\r\n    gender: ''\r\n  };\r\n\r\n  loggedInUserInfo !: loggedInUserInfo;\r\n\r\n  loginFormInfo !: FormGroup;\r\n  registrationFormGroup !: FormGroup;\r\n  valueChangesSubscription: Subscription | undefined;\r\n\r\n\r\n  maxDate!: string; // maxDate for the calendar to prevent under 18 from inscrire\r\n\r\n\r\n  // * Variables related to the component class file \r\n  features: Feature[] = [];\r\n\r\n  //* ViewChild variables\r\n  @ViewChild('header') header!: ElementRef; // getting header tag from view template\r\n  @ViewChild(\"signinspan\") signinspan !: ElementRef;\r\n  @ViewChild(\"signupspan\") signupspan !: ElementRef;\r\n  @ViewChild(\"suggestions\") suggestions !: ElementRef;\r\n  @ViewChild(\"addressResults\") addressResults !: ElementRef;\r\n  @ViewChild(\"input\") input !: ElementRef; // input address\r\n  @ViewChild(\"submitButton\") submitbutton !: ElementRef;\r\n  @ViewChild(\"firstFace\") firstFace !: ElementRef;\r\n  @ViewChild(\"secondFace\") secondFace !: ElementRef;\r\n  @ViewChild(\"thirdFace\") thirdFace !: ElementRef;\r\n  @ViewChild(\"registrationForm\") regForm !: FormGroup;\r\n\r\n\r\n\r\n\r\n  constructor(private http: HttpClient, private authService: AuthenticationService,\r\n    private  ageValidationInstance: InputvalidationsService, private cookieService: CookieService,\r\n    private loggedInUserInstance: LoggedInUserService, private router: Router ) { }\r\n\r\n\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.initLogForm();\r\n    this.initRegistrationForm();\r\n\r\n    this.loggedInUserInstance.getLoggedInUserInfo().subscribe(value => {\r\n      this.loggedInUserInfo = value;\r\n    });\r\n    this.loggedInUserInstance.getLoggedInStatus().subscribe(value => {\r\n      this.isLoggedIn = value;\r\n    });\r\n\r\n  }\r\n\r\n  //* Searching for address when a change happens\r\n  searchingAddress(value: string): object {\r\n\r\n    if (!value) {\r\n      //* Display none for the previous results if the input value becomes null\r\n      this.addressResults.nativeElement.style.display = \"none\";\r\n    }\r\n\r\n    const url = `https://api-adresse.data.gouv.fr/search/?q=${value}&limit=10`;\r\n\r\n    return this.http.get<FeatureCollection>(url)\r\n      .subscribe(reponse => {\r\n        console.log(reponse);\r\n\r\n        this.features = reponse.features;\r\n        this.addressResults.nativeElement.style.display = \"block\";\r\n\r\n      });\r\n\r\n  }\r\n\r\n  //* Selecting the address on click event\r\n  selectaddress(divElement: MouseEvent): void {\r\n\r\n    // targeting the click Div\r\n    const address = divElement.target as HTMLDivElement;\r\n\r\n    // asign the value of the div address to the input value \r\n    // this.input.nativeElement.value = address.innerHTML;\r\n    this.userinscriptiondetails.street = address.innerHTML;\r\n\r\n\r\n    // display none of the container after selecting the address\r\n    this.addressResults.nativeElement.style.display = \"none\";\r\n\r\n    // disable the input after adding the value \r\n    this.input.nativeElement.setAttribute('disabled', \"\");\r\n\r\n    // display none for the container of the suggessted address\r\n    this.suggestions.nativeElement.innerHTML = \"\";\r\n  }\r\n\r\n  //* Reset the input to set a new address\r\n  resetInput(): void {\r\n    // undisabled the address input to set a new address\r\n    this.input.nativeElement.removeAttribute(\"disabled\", \"\");\r\n\r\n    // empty the value of the inputs\r\n    this.userinscriptiondetails.street = \"\";\r\n    this.userinscriptiondetails.buildingnumber = \"\";\r\n\r\n    // \r\n    this.submitbutton.nativeElement.setAttribute('disabled', 'true');\r\n  }\r\n\r\n  //* Changing the color of span signin and signup on click in the arrow\r\n  changingColorOfSpan(): void {\r\n    if (getComputedStyle(this.signinspan.nativeElement).color == \"rgb(8, 129, 120)\") {\r\n      this.signinspan.nativeElement.style.color = \"rgb(196, 195, 202)\";\r\n      this.signupspan.nativeElement.style.color = \"rgb(8, 129, 120)\";\r\n    } else {\r\n      this.signinspan.nativeElement.style.color = \"rgb(8, 129, 120)\";\r\n      this.signupspan.nativeElement.style.color = \"rgb(196, 195, 202)\";\r\n\r\n    }\r\n\r\n\r\n  };\r\n\r\n  //* Submitting the form\r\n  onRegFormSubmit(): void {\r\n\r\n    this.http.post<string[]>(`${baseURL}/inscription.php`, this.userinscriptiondetails).subscribe(\r\n      (response) => {\r\n        // Handle success response\r\n        console.log(response[0]);\r\n        if (response[0] === \"An account associated to this email!\") {\r\n          Swal.fire(\r\n            'Ops',\r\n            response[0],\r\n            'error'\r\n          )\r\n        } else if (response[0] === \"Account has been successfully registered\") {\r\n          Swal.fire(\r\n            'Good job!',\r\n            response[0],\r\n            'success'\r\n          )\r\n        } else {\r\n          Swal.fire({\r\n            title: 'Error!',\r\n            text: response[0],\r\n            icon: 'error',\r\n            confirmButtonText: 'Try Again'\r\n          })\r\n        }\r\n\r\n      },\r\n      (error) => {\r\n        // Handle error response\r\n        Swal.fire({\r\n          title: 'Error!',\r\n          text: error,\r\n          icon: 'error',\r\n          confirmButtonText: 'Cool'\r\n        })\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  //* valid date of people over than 18 years old\r\n  // ageValidator(control: FormControl): ValidationErrors | null {\r\n\r\n\r\n  //   if (this.ageIsValid.ageIsValid(control)) {\r\n  //     return null; // Valid age\r\n  //   } else {\r\n\r\n  //     return { ageInvalid: true }; // Age is less than 18\r\n  //   }\r\n  // }\r\n\r\n  //* Checking the value of address on blur\r\n  onBlur(element: any): void {\r\n    const input = element.target as HTMLInputElement;\r\n    if (!input.hasAttribute(\"disabled\") && this.regForm.invalid)\r\n      this.submitbutton.nativeElement.setAttribute(\"disabled\", \"\");\r\n\r\n  }\r\n\r\n  //* Switching between The Form Faces\r\n  changingFace(click: MouseEvent): void {\r\n\r\n    const button = click.target as HTMLDivElement;\r\n\r\n    if (button.classList.contains(\"toSecondFace\")) {\r\n      if (button.classList.contains(\"previousArrow\")) {//*From Third Face to Second Face\r\n        this.thirdFace.nativeElement.style.right = \"-90%\";\r\n        this.secondFace.nativeElement.style.right = \"13%\";\r\n      } else { //* From First Face to Second Face\r\n        this.firstFace.nativeElement.style.right = \"110%\";\r\n        this.secondFace.nativeElement.style.right = \"13%\";\r\n\r\n      }\r\n    } else if (button.classList.contains(\"toFirstFace\")) { //* From Second Face to First Face\r\n      this.secondFace.nativeElement.style.right = \"-90%\";\r\n      this.firstFace.nativeElement.style.right = \"13%\";\r\n\r\n    } else { //* From Second Face to Third Face\r\n      this.secondFace.nativeElement.style.right = \"110%\";\r\n      this.thirdFace.nativeElement.style.right = \"13%\";\r\n    }\r\n  }\r\n\r\n  //* Check the password match using ngModelChange \r\n  checkPasswordMatch(): void {\r\n\r\n    if (this.userinscriptiondetails.password == this.userinscriptiondetails.passwordconfirmation) {\r\n      console.log(\"Passwords are equal\");\r\n      this.passwordMatch = true;\r\n    } else {\r\n      console.log(\"Passwords are not equal\");\r\n      this.passwordMatch = false;\r\n    }\r\n  }\r\n  //* Check the match of passwords\r\n  // passwordIsValid(event: Event): void {\r\n  //   const input = event.target as HTMLInputElement;\r\n\r\n  //   if (this.passwordMatch && this.pattern.test(input.value)) {\r\n  //     this.patternRespected == true;\r\n  //   } else {\r\n  //     this.patternRespected = false;\r\n\r\n  //   }\r\n\r\n  // }\r\n  //* Init login form\r\n  initLogForm() {\r\n    this.loginFormInfo = new FormGroup({\r\n      logemail: new FormControl(\"\", [\r\n        Validators.required,\r\n        Validators.pattern(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")\r\n      ]),\r\n      logpassword: new FormControl(\"\", [Validators.required])\r\n\r\n    })\r\n  };\r\n  get logemail() {\r\n    return this.loginFormInfo.get(\"logemail\");\r\n  }\r\n  get logPassword() {\r\n    return this.loginFormInfo.get(\"logPassword\");\r\n  }\r\n  //* Init Registeration form\r\n  initRegistrationForm() {\r\n    this.registrationFormGroup = new FormGroup({\r\n      firstFaceGroup: new FormGroup({\r\n        firstName: new FormControl(null, [\r\n          Validators.required,\r\n          Validators.pattern(\"^[a-zA-Z]+$\")\r\n        ]),\r\n        lastName: new FormControl(null, [\r\n          Validators.required,\r\n          Validators.pattern(\"^[a-zA-Z]+( [a-zA-Z]+( [a-zA-Z]+)?)?$\")\r\n        ]),        \r\n        birthdate: new FormControl(null, [\r\n          Validators.required,\r\n          this.ageValidationInstance.ageIsValid?.bind(this.ageValidationInstance)\r\n        ])\r\n      }),\r\n\r\n      secondFaceGroup: new FormGroup({\r\n        email: new FormControl(null, [\r\n          Validators.required,\r\n          Validators.pattern(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")\r\n        ]),\r\n\r\n        passwordGroup: new FormGroup ({\r\n          \r\n           password: new FormControl(null, [\r\n          Validators.required,\r\n          Validators.pattern(\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$\")\r\n        ]),\r\n        confPassword: new FormControl(null, [\r\n          Validators.required,\r\n          Validators.pattern(\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$\")\r\n        ]),\r\n      },\r\n       {\r\n         validators: passwordDoesntMatch\r\n        })\r\n        }),\r\n       \r\n      \r\n      \r\n      thirdFaceGroup: new FormGroup({\r\n        street: new FormControl(null, Validators.required),\r\n        buildingNumber: new FormControl(null, Validators.required),\r\n        gender: new FormControl(null, Validators.required)\r\n      })\r\n    })\r\n  }\r\n\r\n  get secondFaceGroup(){\r\n    return this.registrationFormGroup.get('secondFaceGroup');\r\n  }\r\n  get firstName() {\r\n    return this.registrationFormGroup.get('firstFaceGroup.firstName');\r\n  }\r\n  get lastName() {\r\n    return this.registrationFormGroup.get('firstFaceGroup.lastName');\r\n  }\r\n  get birthdate() {\r\n    return this.registrationFormGroup.get('firstFaceGroup.birthdate');\r\n  }\r\n  get password() {\r\n    return this.registrationFormGroup.get('secondFaceGroup.password');\r\n  }\r\n  get confPassword() {\r\n    return this.registrationFormGroup.get('secondFaceGroup.confPassword');\r\n  }\r\n  get email() {\r\n    return this.registrationFormGroup.get('secondFaceGroup.email');\r\n  }\r\n  get street() {\r\n    return this.registrationFormGroup.get('thirdFaceGroup.street');\r\n  }\r\n  get buildingNumber() {\r\n    return this.registrationFormGroup.get('thirdFaceGroup.buildingNumber');\r\n  }\r\n  get gender() {\r\n    return this.registrationFormGroup.get('thirdFaceGroup.gender');\r\n  }\r\n\r\n  //* Logging in method\r\n  loginMethod() {\r\n    if (this.loginFormInfo.valid) {\r\n\r\n      this.authService.login({ \"logemail\": `${this.loginFormInfo.value.logemail}`, \"logpassword\": `${this.loginFormInfo.value.logpassword}` }).subscribe(\r\n        reponse => {\r\n\r\n\r\n          if (reponse == \"Please Check your email and password.\") {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Failed to connect',\r\n              text: 'Invalid email or password!',\r\n            })\r\n          } else {\r\n\r\n            this.loggedInUserInstance.setLoggedInUserInfo(reponse);\r\n            this.loggedInUserInstance.setLoggedInStatus(true);\r\n            \r\n            const token = reponse.email;\r\n            this.cookieService.set('token', token);\r\n\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Welcome',\r\n              text: `${this.loggedInUserInfo.firstname}`,\r\n            });\r\n\r\n            this.router.navigate(['/home']);\r\n\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      )\r\n\r\n    } else {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error...',\r\n        text: 'Something went wrong, refresh the page and try again!',\r\n      })\r\n    }\r\n  }\r\n\r\n  //* Setting the isLoggedInStatus to true if token exists\r\n  setter() {\r\n    if (this.cookieService.check(\"token\")) {\r\n      this.loggedInUserInstance.setLoggedInStatus(true);\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}