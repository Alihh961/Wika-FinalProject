{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./logged-in-user.service\";\nexport class GuardGuard {\n  constructor(loggedInUserServiceInstance) {\n    this.loggedInUserServiceInstance = loggedInUserServiceInstance;\n  }\n  ngOnInit() {\n    this.loggedInUserServiceInstance.getLoggedInStatus().subscribe(value => {});\n  }\n  canActivate(route, state) {\n    if (this.loggedInUserServiceInstance.getLoggedInStatus() === true) return true;\n  }\n}\nGuardGuard.ɵfac = function GuardGuard_Factory(t) {\n  return new (t || GuardGuard)(i0.ɵɵinject(i1.LoggedInUserService));\n};\nGuardGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GuardGuard,\n  factory: GuardGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,2BAAgD;IAAhD,gCAA2B,GAA3BA,2BAA2B;EAAuB;EAEtEC,QAAQ;IACN,IAAI,CAACD,2BAA2B,CAACE,iBAAiB,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG,CAEvE,CAAC,CAAC;EACJ;EACAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,IAAG,IAAI,CAACP,2BAA2B,CAACE,iBAAiB,EAAE,KAAK,IAAI,EAClE,OAAO,IAAI;EACb;;AAbWJ,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAU,SAAVV,UAAU;EAAAW,YAFT;AAAM","names":["GuardGuard","constructor","loggedInUserServiceInstance","ngOnInit","getLoggedInStatus","subscribe","value","canActivate","route","state","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hajha\\OneDrive\\Desktop\\Wika\\src\\app\\services\\guard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree ,Router } from '@angular/router';\nimport { LoggedInUserService } from './logged-in-user.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardGuard implements CanActivate {\n  constructor(private loggedInUserServiceInstance: LoggedInUserService){}\n\n  ngOnInit(){\n    this.loggedInUserServiceInstance.getLoggedInStatus().subscribe(value =>{\n      \n    })\n  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if(this.loggedInUserServiceInstance.getLoggedInStatus() === true)\n    return true;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}