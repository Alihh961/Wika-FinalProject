{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild, HostListener } from '@angular/core';\nlet HeaderComponent = class HeaderComponent {\n  constructor(loggedInUserInstance, cookieService, authService, router) {\n    this.loggedInUserInstance = loggedInUserInstance;\n    this.cookieService = cookieService;\n    this.authService = authService;\n    this.router = router;\n    this.logoSource = './assets/imgs/WIKA_Logo.png';\n    this.isOpened = false;\n    this.isLoggedIn = false;\n    this.dropDownMenuStatus = false;\n    this.dropDownMenuStatusIsAdmin = false;\n    this.arrowDown = false;\n  }\n  ngOnInit() {\n    this.loggedInUserInstance.getLoggedInStatus().subscribe(booleanValue => {\n      this.isLoggedIn = booleanValue;\n    });\n    this.loggedInUserInstance.getLoggedInUserInfo().subscribe(userInfo => {\n      this.loggedInUserInfo = userInfo;\n    });\n    this.setLoggedInValue();\n    const token = this.cookieService.get(\"token\");\n    if (token) {\n      this.authService.getDataOfUser(token).subscribe(data => {\n        this.loggedInUserInstance.setLoggedInUserInfo(data);\n        console.log(data);\n      });\n    }\n    this.loggedInUserInstance.getLoggedInUserInfo().subscribe(value => {\n      this.isAdmin = value.isAdmin;\n    });\n    console.log(this.isLoggedIn);\n  }\n  //* Setting the isLoggedInStatus to true if token exists\n  setLoggedInValue() {\n    if (this.cookieService.check(\"token\")) {\n      this.loggedInUserInstance.setLoggedInStatus(true);\n    }\n  }\n  ngAfterViewChecked() {}\n  onWindowScroll() {\n    const headerElement = this.header.nativeElement;\n    if (window.scrollY !== 0) {\n      headerElement.classList.add(\"onScroll\");\n    } else {\n      headerElement.classList.remove(\"onScroll\");\n    }\n  }\n  //toggle menuburger\n  openAndCloseMenuBurger() {\n    this.isOpened = !this.isOpened;\n  }\n  //toggle dropdown menu\n  toggleDropMenu() {\n    if (this.isAdmin == false) {\n      this.dropDownMenuStatus = !this.dropDownMenuStatus; // if the user is not an admin(specify class with height)\n    } else {\n      this.dropDownMenuStatusIsAdmin = !this.dropDownMenuStatusIsAdmin; // if the user is a admin(specify class with diffrent height)\n    }\n\n    this.arrowDown = !this.arrowDown;\n  }\n  //logging out process \n  logout() {\n    this.loggedInUserInstance.setLoggedInStatus(false);\n    this.cookieService.delete(\"token\");\n    this.router.navigate([\"/home\"]);\n    this.dropDownMenuStatus = false;\n    this.dropDownMenuStatusIsAdmin = false;\n    this.arrowDown = false;\n  }\n};\n__decorate([ViewChild('header')], HeaderComponent.prototype, \"header\", void 0);\n__decorate([ViewChild('dropDownMenu')], HeaderComponent.prototype, \"dropDownMenu\", void 0);\n__decorate([HostListener('window:scroll') // listen to the scroll event;\n], HeaderComponent.prototype, \"onWindowScroll\", null);\nHeaderComponent = __decorate([Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})], HeaderComponent);\nexport { HeaderComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","HostListener","HeaderComponent","constructor","loggedInUserInstance","cookieService","authService","router","ngOnInit","getLoggedInStatus","subscribe","booleanValue","isLoggedIn","getLoggedInUserInfo","userInfo","loggedInUserInfo","setLoggedInValue","token","get","getDataOfUser","data","setLoggedInUserInfo","console","log","value","isAdmin","check","setLoggedInStatus","ngAfterViewChecked","onWindowScroll","headerElement","header","nativeElement","window","scrollY","classList","add","remove","openAndCloseMenuBurger","isOpened","toggleDropMenu","dropDownMenuStatus","dropDownMenuStatusIsAdmin","arrowDown","logout","delete","navigate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hajha\\OneDrive\\Desktop\\Wika\\src\\app\\header\\header.component.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild, AfterViewInit, asNativeElements, HostListener, Input, AfterViewChecked } from '@angular/core';\r\nimport { LoggedInUserService } from '../services/logged-in-user.service';\r\nimport { loggedInUserInfo } from '../Interface/userdetails';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n\r\n})\r\nexport class HeaderComponent implements AfterViewChecked {\r\n\r\n  constructor(private loggedInUserInstance: LoggedInUserService, private cookieService: CookieService,\r\n    private authService: AuthenticationService, private router: Router) { }\r\n\r\n\r\n  @ViewChild('header') header!: ElementRef; // getting header tag from view template\r\n  @ViewChild('dropDownMenu') dropDownMenu!: ElementRef;\r\n\r\n\r\n  logoSource: string = './assets/imgs/WIKA_Logo.png';\r\n  isOpened: boolean = false;\r\n  isLoggedIn: boolean = false;\r\n  loggedInUserInfo!: loggedInUserInfo;\r\n  dropDownMenuStatus: boolean = false;\r\n  dropDownMenuStatusIsAdmin: boolean = false;\r\n  arrowDown: boolean = false;\r\n  isAdmin!: boolean;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.loggedInUserInstance.getLoggedInStatus().subscribe(booleanValue => {\r\n      this.isLoggedIn = booleanValue;\r\n    })\r\n\r\n    this.loggedInUserInstance.getLoggedInUserInfo().subscribe(userInfo => {\r\n      this.loggedInUserInfo = userInfo;\r\n    })\r\n\r\n    this.setLoggedInValue();\r\n    const token = this.cookieService.get(\"token\");\r\n    if (token) {\r\n      this.authService.getDataOfUser(token).subscribe(data => {\r\n        this.loggedInUserInstance.setLoggedInUserInfo(data);\r\n        console.log(data);\r\n      });\r\n    }\r\n\r\n    this.loggedInUserInstance.getLoggedInUserInfo().subscribe(value => {\r\n      this.isAdmin = value.isAdmin;\r\n    })\r\n\r\n    console.log(this.isLoggedIn);\r\n  }\r\n\r\n\r\n  //* Setting the isLoggedInStatus to true if token exists\r\n  setLoggedInValue(): void {\r\n    if (this.cookieService.check(\"token\")) {\r\n      this.loggedInUserInstance.setLoggedInStatus(true);\r\n    }\r\n  }\r\n  ngAfterViewChecked() {\r\n\r\n  }\r\n\r\n  @HostListener('window:scroll')// listen to the scroll event;\r\n\r\n  onWindowScroll() {\r\n    const headerElement = this.header.nativeElement;\r\n    if (window.scrollY !== 0) {\r\n\r\n      headerElement.classList.add(\"onScroll\");\r\n\r\n    } else {\r\n      headerElement.classList.remove(\"onScroll\");\r\n    }\r\n  }\r\n  //toggle menuburger\r\n  openAndCloseMenuBurger() {\r\n\r\n    this.isOpened = !this.isOpened;\r\n\r\n  }\r\n\r\n  //toggle dropdown menu\r\n  toggleDropMenu() {\r\n    if (this.isAdmin == false) {\r\n      this.dropDownMenuStatus = !this.dropDownMenuStatus; // if the user is not an admin(specify class with height)\r\n    }\r\n    else {\r\n      this.dropDownMenuStatusIsAdmin = !this.dropDownMenuStatusIsAdmin;// if the user is a admin(specify class with diffrent height)\r\n    }\r\n    this.arrowDown = !this.arrowDown;\r\n  }\r\n\r\n\r\n  //logging out process \r\n  logout() {\r\n    this.loggedInUserInstance.setLoggedInStatus(false);\r\n    this.cookieService.delete(\"token\");\r\n    this.router.navigate([\"/home\"]);\r\n    this.dropDownMenuStatus = false;\r\n    this.dropDownMenuStatusIsAdmin = false;\r\n    this.arrowDown = false;\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}