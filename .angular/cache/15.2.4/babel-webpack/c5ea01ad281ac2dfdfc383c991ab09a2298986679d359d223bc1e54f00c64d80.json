{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/logged-in-user.service\";\nimport * as i2 from \"@angular/router\";\nexport class IsAdminGuard {\n  constructor(loggedInUserServiceInstance, router) {\n    this.loggedInUserServiceInstance = loggedInUserServiceInstance;\n    this.router = router;\n  }\n  canActivate() {\n    var isAdmin = false;\n    this.loggedInUserServiceInstance.getLoggedIsUserIsAdmin().subscribe(value => {\n      isAdmin = value;\n    });\n    if (isAdmin) {\n      this.router.navigate(['/home']);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nIsAdminGuard.ɵfac = function IsAdminGuard_Factory(t) {\n  return new (t || IsAdminGuard)(i0.ɵɵinject(i1.LoggedInUserService), i0.ɵɵinject(i2.Router));\n};\nIsAdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: IsAdminGuard,\n  factory: IsAdminGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,YAAY;EAEvBC,YAAoBC,2BAAgD,EAAWC,MAAc;IAAzE,gCAA2B,GAA3BD,2BAA2B;IAAgC,WAAM,GAANC,MAAM;EAAU;EAC/FC,WAAW;IACT,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAI,CAACH,2BAA2B,CAACI,sBAAsB,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MAC1EH,OAAO,GAAGG,KAAK;IACjB,CAAC,CAAC;IACF,IAAIH,OAAO,EAAE;MACX,IAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAE/B,OAAO,IAAI;KACZ,MAAM;MAGL,OAAO,KAAK;;EAGlB;;AAlBaT,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAU,SAAZV,YAAY;EAAAW,YAFX;AAAM","names":["IsAdminGuard","constructor","loggedInUserServiceInstance","router","canActivate","isAdmin","getLoggedIsUserIsAdmin","subscribe","value","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hajha\\OneDrive\\Desktop\\Wika\\src\\app\\guards\\is-admin.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoggedInUserService } from '../services/logged-in-user.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IsAdminGuard implements CanActivate {\n\n  constructor(private loggedInUserServiceInstance: LoggedInUserService , private router :Router){}\n  canActivate(): boolean {\n    var isAdmin = false ;\n    this.loggedInUserServiceInstance.getLoggedIsUserIsAdmin().subscribe(value =>{\n      isAdmin = value;\n    });\n    if (isAdmin) {\n      this.router.navigate(['/home']);\n\n      return true;\n    } else {\n\n\n      return false;\n    } \n  \n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}