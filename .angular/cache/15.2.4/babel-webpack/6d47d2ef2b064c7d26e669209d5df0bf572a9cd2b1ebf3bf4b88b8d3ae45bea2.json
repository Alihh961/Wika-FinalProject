{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/logged-in-user.service\";\nimport * as i2 from \"@angular/router\";\nexport class GuardGuard {\n  constructor(loggedInUserServiceInstance, router) {\n    this.loggedInUserServiceInstance = loggedInUserServiceInstance;\n    this.router = router;\n  }\n  canActivate() {\n    var isLoggedIn = false;\n    this.loggedInUserServiceInstance.getLoggedInStatus().subscribe(value => {\n      isLoggedIn = value;\n    });\n    if (isLoggedIn) {\n      this.router.navigate(['/home']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nGuardGuard.ɵfac = function GuardGuard_Factory(t) {\n  return new (t || GuardGuard)(i0.ɵɵinject(i1.LoggedInUserService), i0.ɵɵinject(i2.Router));\n};\nGuardGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GuardGuard,\n  factory: GuardGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,2BAAgD,EAAUC,MAAc;IAAxE,gCAA2B,GAA3BD,2BAA2B;IAA+B,WAAM,GAANC,MAAM;EAAY;EAEhGC,WAAW;IACT,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAI,CAACH,2BAA2B,CAACI,iBAAiB,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MACrEH,UAAU,GAAGG,KAAK;IACpB,CAAC,CAAC;IACF,IAAIH,UAAU,EAAE;MACd,IAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAEf;;AAdWT,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAU,SAAVV,UAAU;EAAAW,YAFT;AAAM","names":["GuardGuard","constructor","loggedInUserServiceInstance","router","canActivate","isLoggedIn","getLoggedInStatus","subscribe","value","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hajha\\OneDrive\\Desktop\\Wika\\src\\app\\guards\\guard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { LoggedInUserService } from '../services/logged-in-user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardGuard implements CanActivate {\n  constructor(private loggedInUserServiceInstance: LoggedInUserService, private router: Router) { }\n\n  canActivate(): boolean {\n    var isLoggedIn = false ;\n    this.loggedInUserServiceInstance.getLoggedInStatus().subscribe(value =>{\n      isLoggedIn = value;\n    });\n    if (isLoggedIn) {\n      this.router.navigate(['/home']);\n      return false;\n    } else {\n      return true;\n    } \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}